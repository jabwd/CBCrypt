// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXAggregateTarget section */
		"CBCrypt::CBCryptPackageTests::ProductTarget" /* CBCryptPackageTests */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = OBJ_50 /* Build configuration list for PBXAggregateTarget "CBCryptPackageTests" */;
			buildPhases = (
			);
			dependencies = (
				OBJ_53 /* PBXTargetDependency */,
			);
			name = CBCryptPackageTests;
			productName = CBCryptPackageTests;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		OBJ_29 /* Package.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_6 /* Package.swift */; };
		OBJ_35 /* HashTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_20 /* HashTests.swift */; };
		OBJ_37 /* CBCrypt.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = "CBCrypt::CBCrypt::Product" /* CBCrypt.framework */; };
		OBJ_44 /* bcrypt.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_8 /* bcrypt.c */; };
		OBJ_45 /* crypt_blowfish.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_9 /* crypt_blowfish.c */; };
		OBJ_46 /* crypt_gensalt.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_10 /* crypt_gensalt.c */; };
		OBJ_47 /* wrapper.c in Sources */ = {isa = PBXBuildFile; fileRef = OBJ_11 /* wrapper.c */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		367636051FACB15600E3F769 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "CBCrypt::CBCrypt";
			remoteInfo = CBCrypt;
		};
		367636061FACB15700E3F769 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = OBJ_1 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = "CBCrypt::CBCryptTests";
			remoteInfo = CBCryptTests;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		"CBCrypt::CBCrypt::Product" /* CBCrypt.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; path = CBCrypt.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		"CBCrypt::CBCryptTests::Product" /* CBCryptTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; path = CBCryptTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		OBJ_10 /* crypt_gensalt.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = crypt_gensalt.c; sourceTree = "<group>"; };
		OBJ_11 /* wrapper.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = wrapper.c; sourceTree = "<group>"; };
		OBJ_12 /* crypt_blowfish.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = crypt_blowfish.h; sourceTree = "<group>"; };
		OBJ_13 /* crypt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = crypt.h; sourceTree = "<group>"; };
		OBJ_14 /* crypt_gensalt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = crypt_gensalt.h; sourceTree = "<group>"; };
		OBJ_15 /* ow-crypt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "ow-crypt.h"; sourceTree = "<group>"; };
		OBJ_16 /* bcrypt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = bcrypt.h; sourceTree = "<group>"; };
		OBJ_17 /* module.modulemap */ = {isa = PBXFileReference; lastKnownFileType = "sourcecode.module-map"; name = module.modulemap; path = /Users/jabwd/Developer/Repositories/CBcrypt/CBCrypt.xcodeproj/GeneratedModuleMap/CBCrypt/module.modulemap; sourceTree = "<group>"; };
		OBJ_20 /* HashTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = HashTests.swift; sourceTree = "<group>"; };
		OBJ_6 /* Package.swift */ = {isa = PBXFileReference; explicitFileType = sourcecode.swift; path = Package.swift; sourceTree = "<group>"; };
		OBJ_8 /* bcrypt.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = bcrypt.c; sourceTree = "<group>"; };
		OBJ_9 /* crypt_blowfish.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; path = crypt_blowfish.c; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		OBJ_36 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_37 /* CBCrypt.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_48 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		OBJ_18 /* Tests */ = {
			isa = PBXGroup;
			children = (
				OBJ_19 /* CBCryptTests */,
			);
			name = Tests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_19 /* CBCryptTests */ = {
			isa = PBXGroup;
			children = (
				OBJ_20 /* HashTests.swift */,
			);
			name = CBCryptTests;
			path = Tests/CBCryptTests;
			sourceTree = SOURCE_ROOT;
		};
		OBJ_21 /* Products */ = {
			isa = PBXGroup;
			children = (
				"CBCrypt::CBCryptTests::Product" /* CBCryptTests.xctest */,
				"CBCrypt::CBCrypt::Product" /* CBCrypt.framework */,
			);
			name = Products;
			sourceTree = BUILT_PRODUCTS_DIR;
		};
		OBJ_5 /*  */ = {
			isa = PBXGroup;
			children = (
				OBJ_6 /* Package.swift */,
				OBJ_7 /* Sources */,
				OBJ_18 /* Tests */,
				OBJ_21 /* Products */,
			);
			name = "";
			sourceTree = "<group>";
		};
		OBJ_7 /* Sources */ = {
			isa = PBXGroup;
			children = (
				OBJ_8 /* bcrypt.c */,
				OBJ_9 /* crypt_blowfish.c */,
				OBJ_10 /* crypt_gensalt.c */,
				OBJ_11 /* wrapper.c */,
				OBJ_12 /* crypt_blowfish.h */,
				OBJ_13 /* crypt.h */,
				OBJ_14 /* crypt_gensalt.h */,
				OBJ_15 /* ow-crypt.h */,
				OBJ_16 /* bcrypt.h */,
				OBJ_17 /* module.modulemap */,
			);
			path = Sources;
			sourceTree = SOURCE_ROOT;
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		"CBCrypt::CBCrypt" /* CBCrypt */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_40 /* Build configuration list for PBXNativeTarget "CBCrypt" */;
			buildPhases = (
				OBJ_43 /* Sources */,
				OBJ_48 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = CBCrypt;
			productName = CBCrypt;
			productReference = "CBCrypt::CBCrypt::Product" /* CBCrypt.framework */;
			productType = "com.apple.product-type.framework";
		};
		"CBCrypt::CBCryptTests" /* CBCryptTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_31 /* Build configuration list for PBXNativeTarget "CBCryptTests" */;
			buildPhases = (
				OBJ_34 /* Sources */,
				OBJ_36 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				OBJ_38 /* PBXTargetDependency */,
			);
			name = CBCryptTests;
			productName = CBCryptTests;
			productReference = "CBCrypt::CBCryptTests::Product" /* CBCryptTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		"CBCrypt::SwiftPMPackageDescription" /* CBCryptPackageDescription */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = OBJ_25 /* Build configuration list for PBXNativeTarget "CBCryptPackageDescription" */;
			buildPhases = (
				OBJ_28 /* Sources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = CBCryptPackageDescription;
			productName = CBCryptPackageDescription;
			productType = "com.apple.product-type.framework";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		OBJ_1 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 9999;
			};
			buildConfigurationList = OBJ_2 /* Build configuration list for PBXProject "CBCrypt" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = OBJ_5 /*  */;
			productRefGroup = OBJ_21 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				"CBCrypt::SwiftPMPackageDescription" /* CBCryptPackageDescription */,
				"CBCrypt::CBCryptTests" /* CBCryptTests */,
				"CBCrypt::CBCrypt" /* CBCrypt */,
				"CBCrypt::CBCryptPackageTests::ProductTarget" /* CBCryptPackageTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		OBJ_28 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_29 /* Package.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_34 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_35 /* HashTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		OBJ_43 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 0;
			files = (
				OBJ_44 /* bcrypt.c in Sources */,
				OBJ_45 /* crypt_blowfish.c in Sources */,
				OBJ_46 /* crypt_gensalt.c in Sources */,
				OBJ_47 /* wrapper.c in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		OBJ_38 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "CBCrypt::CBCrypt" /* CBCrypt */;
			targetProxy = 367636051FACB15600E3F769 /* PBXContainerItemProxy */;
		};
		OBJ_53 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = "CBCrypt::CBCryptTests" /* CBCryptTests */;
			targetProxy = 367636061FACB15700E3F769 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		OBJ_26 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 4 -I /Library/Developer/Toolchains/swift-4.0.2-RELEASE.xctoolchain/usr/lib/swift/pm/4 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk";
				SWIFT_VERSION = 4.0;
			};
			name = Debug;
		};
		OBJ_27 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				LD = /usr/bin/true;
				OTHER_SWIFT_FLAGS = "-swift-version 4 -I /Library/Developer/Toolchains/swift-4.0.2-RELEASE.xctoolchain/usr/lib/swift/pm/4 -target x86_64-apple-macosx10.10 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk";
				SWIFT_VERSION = 4.0;
			};
			name = Release;
		};
		OBJ_3 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				ENABLE_NS_ASSERTIONS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				ONLY_ACTIVE_ARCH = YES;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				USE_HEADERMAP = NO;
			};
			name = Debug;
		};
		OBJ_32 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				EMBEDDED_CONTENT_CONTAINS_SWIFT = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Sources",
					"$(SRCROOT)/CBCrypt.xcodeproj/GeneratedModuleMap/CBCrypt",
				);
				INFOPLIST_FILE = CBCrypt.xcodeproj/CBCryptTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "@loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited) -Xcc -fmodule-map-file=$(SRCROOT)/CBCrypt.xcodeproj/GeneratedModuleMap/CBCrypt/module.modulemap";
				SWIFT_VERSION = 4.0;
				TARGET_NAME = CBCryptTests;
			};
			name = Debug;
		};
		OBJ_33 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				EMBEDDED_CONTENT_CONTAINS_SWIFT = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Sources",
					"$(SRCROOT)/CBCrypt.xcodeproj/GeneratedModuleMap/CBCrypt",
				);
				INFOPLIST_FILE = CBCrypt.xcodeproj/CBCryptTests_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "@loader_path/../Frameworks @loader_path/Frameworks";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited) -Xcc -fmodule-map-file=$(SRCROOT)/CBCrypt.xcodeproj/GeneratedModuleMap/CBCrypt/module.modulemap";
				SWIFT_VERSION = 4.0;
				TARGET_NAME = CBCryptTests;
			};
			name = Release;
		};
		OBJ_4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CLANG_ENABLE_OBJC_ARC = YES;
				COMBINE_HIDPI_IMAGES = YES;
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				DYLIB_INSTALL_NAME_BASE = "@rpath";
				GCC_OPTIMIZATION_LEVEL = s;
				MACOSX_DEPLOYMENT_TARGET = 10.10;
				OTHER_SWIFT_FLAGS = "-DXcode";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = macosx;
				SUPPORTED_PLATFORMS = "macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE;
				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
				USE_HEADERMAP = NO;
			};
			name = Release;
		};
		OBJ_41 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DEFINES_MODULE = NO;
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Sources",
				);
				INFOPLIST_FILE = CBCrypt.xcodeproj/CBCrypt_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = CBCrypt;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_VERSION = 4.0;
				TARGET_NAME = CBCrypt;
			};
			name = Debug;
		};
		OBJ_42 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DEFINES_MODULE = NO;
				ENABLE_TESTABILITY = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(inherited)",
					"$(PLATFORM_DIR)/Developer/Library/Frameworks",
				);
				HEADER_SEARCH_PATHS = (
					"$(inherited)",
					"$(SRCROOT)/Sources",
				);
				INFOPLIST_FILE = CBCrypt.xcodeproj/CBCrypt_Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(TOOLCHAIN_DIR)/usr/lib/swift/macosx";
				OTHER_LDFLAGS = "$(inherited)";
				OTHER_SWIFT_FLAGS = "$(inherited)";
				PRODUCT_BUNDLE_IDENTIFIER = CBCrypt;
				PRODUCT_MODULE_NAME = "$(TARGET_NAME:c99extidentifier)";
				PRODUCT_NAME = "$(TARGET_NAME:c99extidentifier)";
				SKIP_INSTALL = YES;
				SWIFT_VERSION = 4.0;
				TARGET_NAME = CBCrypt;
			};
			name = Release;
		};
		OBJ_51 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Debug;
		};
		OBJ_52 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		OBJ_2 /* Build configuration list for PBXProject "CBCrypt" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_3 /* Debug */,
				OBJ_4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_25 /* Build configuration list for PBXNativeTarget "CBCryptPackageDescription" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_26 /* Debug */,
				OBJ_27 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_31 /* Build configuration list for PBXNativeTarget "CBCryptTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_32 /* Debug */,
				OBJ_33 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_40 /* Build configuration list for PBXNativeTarget "CBCrypt" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_41 /* Debug */,
				OBJ_42 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
		OBJ_50 /* Build configuration list for PBXAggregateTarget "CBCryptPackageTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				OBJ_51 /* Debug */,
				OBJ_52 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Debug;
		};
/* End XCConfigurationList section */
	};
	rootObject = OBJ_1 /* Project object */;
}
